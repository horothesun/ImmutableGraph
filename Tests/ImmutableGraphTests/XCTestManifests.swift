#if !canImport(ObjectiveC)
import XCTest

extension Array_ToSetTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__Array_ToSetTests = [
        ("testToSet_WithEmptyArray_MustReturnEmptySet", testToSet_WithEmptyArray_MustReturnEmptySet),
        ("testToSet_WithOneElementArray_MustReturnSetWithSameElement", testToSet_WithOneElementArray_MustReturnSetWithSameElement),
        ("testToSet_WithTwoElementsArray_MustReturnSetWithSameTwoElements", testToSet_WithTwoElementsArray_MustReturnSetWithSameTwoElements),
    ]
}

extension BFSTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BFSTests = [
        ("testBFS_With16Vertices34EdgesGraphAndSourceS_MustReturnCorrectSimpleGraphAnnotation", testBFS_With16Vertices34EdgesGraphAndSourceS_MustReturnCorrectSimpleGraphAnnotation),
        ("testBFS_WithAToZGraphAndSourceA_MustReturnCorrectSimpleGraphAnnotation", testBFS_WithAToZGraphAndSourceA_MustReturnCorrectSimpleGraphAnnotation),
        ("testBFS_WithAToZGraphAndSourceZ_MustReturnCorrectSimpleGraphAnnotation", testBFS_WithAToZGraphAndSourceZ_MustReturnCorrectSimpleGraphAnnotation),
        ("testBFS_WithAToZWeightedGraphAndSourceA_MustReturnCorrectSimpleGraphAnnotation", testBFS_WithAToZWeightedGraphAndSourceA_MustReturnCorrectSimpleGraphAnnotation),
        ("testBFS_WithAToZWeightedGraphAndSourceZ_MustReturnCorrectSimpleGraphAnnotation", testBFS_WithAToZWeightedGraphAndSourceZ_MustReturnCorrectSimpleGraphAnnotation),
        ("testBFS_WithEmptyGraphAndSourceV_MustReturnEmptySimpleGraphAnnotation", testBFS_WithEmptyGraphAndSourceV_MustReturnEmptySimpleGraphAnnotation),
        ("testBFS_WithEmptyWeightedGraphAndSourceV_MustReturnEmptySimpleGraphAnnotation", testBFS_WithEmptyWeightedGraphAndSourceV_MustReturnEmptySimpleGraphAnnotation),
        ("testBFS_WithZToAGraphAndSourceA_MustReturnCorrectSimpleGraphAnnotation", testBFS_WithZToAGraphAndSourceA_MustReturnCorrectSimpleGraphAnnotation),
        ("testBFS_WithZToAGraphAndSourceZ_MustReturnCorrectSimpleGraphAnnotation", testBFS_WithZToAGraphAndSourceZ_MustReturnCorrectSimpleGraphAnnotation),
        ("testBFS_WithZToAWeightedGraphWithSourceA_MustReturnCorrectSimpleGraphAnnotation", testBFS_WithZToAWeightedGraphWithSourceA_MustReturnCorrectSimpleGraphAnnotation),
        ("testBFS_WithZToAWeightedGraphWithSourceZ_MustReturnCorrectSimpleGraphAnnotation", testBFS_WithZToAWeightedGraphWithSourceZ_MustReturnCorrectSimpleGraphAnnotation),
    ]
}

extension DFSTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DFSTests = [
        ("testDFS_With6Vertices4EdgesGraph_MustReturnCorrectSimpleGraphAnnotation", testDFS_With6Vertices4EdgesGraph_MustReturnCorrectSimpleGraphAnnotation),
        ("testDFS_WithAToZGraph_MustReturnCorrectSimpleGraphAnnotation", testDFS_WithAToZGraph_MustReturnCorrectSimpleGraphAnnotation),
        ("testDFS_WithAToZWeightedGraph_MustReturnCorrectSimpleGraphAnnotation", testDFS_WithAToZWeightedGraph_MustReturnCorrectSimpleGraphAnnotation),
        ("testDFS_WithEmptyGraph_MustReturnEmptySimpleGraphAnnotation", testDFS_WithEmptyGraph_MustReturnEmptySimpleGraphAnnotation),
        ("testDFS_WithEmptyWeightedGraph_MustReturnEmptySimpleGraphAnnotation", testDFS_WithEmptyWeightedGraph_MustReturnEmptySimpleGraphAnnotation),
        ("testDFS_WithZToAGraph_MustReturnCorrectSimpleGraphAnnotation", testDFS_WithZToAGraph_MustReturnCorrectSimpleGraphAnnotation),
        ("testDFS_WithZToAWeightedGraph_MustReturnCorrectSimpleGraphAnnotation", testDFS_WithZToAWeightedGraph_MustReturnCorrectSimpleGraphAnnotation),
        ("testDFSFromSource_With6Vertices4EdgesGraphAndSourceA_MustReturnCorrectSimpleGraphAnnotation", testDFSFromSource_With6Vertices4EdgesGraphAndSourceA_MustReturnCorrectSimpleGraphAnnotation),
        ("testDFSFromSource_WithAToZGraphAndSourceA_MustReturnCorrectSimpleGraphAnnotation", testDFSFromSource_WithAToZGraphAndSourceA_MustReturnCorrectSimpleGraphAnnotation),
        ("testDFSFromSource_WithEmptyGraphAndSourceV_MustReturnEmptySimpleGraphAnnotation", testDFSFromSource_WithEmptyGraphAndSourceV_MustReturnEmptySimpleGraphAnnotation),
        ("testDFSFromSource_WithZToAGraphAndSourceA_MustReturnCorrectSimpleGraphAnnotation", testDFSFromSource_WithZToAGraphAndSourceA_MustReturnCorrectSimpleGraphAnnotation),
    ]
}

extension EdgeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__EdgeTests = [
        ("testEquals_WithSameDestinationAndDifferentSource_MustReturnFalse", testEquals_WithSameDestinationAndDifferentSource_MustReturnFalse),
        ("testEquals_WithSameSourceAndDifferentDestination_MustReturnFalse", testEquals_WithSameSourceAndDifferentDestination_MustReturnFalse),
        ("testEquals_WithSameSourceDestination_MustReturnTrue", testEquals_WithSameSourceDestination_MustReturnTrue),
    ]
}

extension FindPathTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FindPathTests = [
        ("testFindPath_With16VerticesGraphAndSourceFAndReachableDestinationJ_MustReturnFToIToJPath", testFindPath_With16VerticesGraphAndSourceFAndReachableDestinationJ_MustReturnFToIToJPath),
        ("testFindPath_With16VerticesGraphAndSourceKAndUnreachableDestinationS_MustReturnEmptyPath", testFindPath_With16VerticesGraphAndSourceKAndUnreachableDestinationS_MustReturnEmptyPath),
        ("testFindPath_With16VerticesGraphAndSourceOAndUnreachableDestinationS_MustReturnEmptyPath", testFindPath_With16VerticesGraphAndSourceOAndUnreachableDestinationS_MustReturnEmptyPath),
        ("testFindPath_With16VerticesGraphAndSourceSAndReachableDestinationJ_MustReturnSToFToIToJPath", testFindPath_With16VerticesGraphAndSourceSAndReachableDestinationJ_MustReturnSToFToIToJPath),
        ("testFindPath_WithEmptyParentByVertexAndSourceSAndDestinationD_MustReturnEmptyPath", testFindPath_WithEmptyParentByVertexAndSourceSAndDestinationD_MustReturnEmptyPath),
        ("testFindPath_WithOneUnparentedVertexDAndSourceSAndDestinationD_MustReturnEmptyPath", testFindPath_WithOneUnparentedVertexDAndSourceSAndDestinationD_MustReturnEmptyPath),
        ("testFindPath_WithOneUnparentedVertexSAndSourceSAndDestinationD_MustReturnEmptyPath", testFindPath_WithOneUnparentedVertexSAndSourceSAndDestinationD_MustReturnEmptyPath),
        ("testFindPath_WithUnparentedSAndSParentOfDAndSourceSAndDestinationD_MustReturnSToDPath", testFindPath_WithUnparentedSAndSParentOfDAndSourceSAndDestinationD_MustReturnSToDPath),
        ("testFindPath_WithV1AndV2AndV3VerticesAndSourceV1AndUnreachableDestinationV3_MustReturnEmptyPath", testFindPath_WithV1AndV2AndV3VerticesAndSourceV1AndUnreachableDestinationV3_MustReturnEmptyPath),
    ]
}

extension GraphTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__GraphTests = [
        ("testAdjacencyList_With5VerticesAnd3EdgesWithSameSourceVPlusOneExtraEdgeToVGraphFromV_MustReturn3VerticesSortedList", testAdjacencyList_With5VerticesAnd3EdgesWithSameSourceVPlusOneExtraEdgeToVGraphFromV_MustReturn3VerticesSortedList),
        ("testAdjacencyList_With5VerticesAndOnly3EdgesWithSameSourceVGraphFromV_MustReturn3VerticesSortedList", testAdjacencyList_With5VerticesAndOnly3EdgesWithSameSourceVGraphFromV_MustReturn3VerticesSortedList),
        ("testAdjacencyList_WithEmptyGraphFromFakeVertex_MustReturnEmptyVerticesList", testAdjacencyList_WithEmptyGraphFromFakeVertex_MustReturnEmptyVerticesList),
        ("testAdjacencyList_WithOneVertexAndNoEdgesGraphFromOnlyVertex_MustReturnEmptyVerticesList", testAdjacencyList_WithOneVertexAndNoEdgesGraphFromOnlyVertex_MustReturnEmptyVerticesList),
        ("testAdjacencyList_WithUAndVVerticesAndU_VEdgeGraphFromU_MustReturnListWithOnlyV", testAdjacencyList_WithUAndVVerticesAndU_VEdgeGraphFromU_MustReturnListWithOnlyV),
        ("testEquals_WithEmptyGraphAndEmptyGraph_MustReturnTrue", testEquals_WithEmptyGraphAndEmptyGraph_MustReturnTrue),
        ("testEquals_WithEmptyGraphAndGraphWith2VerticesAnd1Edge_MustReturnFalse", testEquals_WithEmptyGraphAndGraphWith2VerticesAnd1Edge_MustReturnFalse),
        ("testEquals_WithEmptyGraphAndGraphWithOnlyOneVertex_MustReturnFalse", testEquals_WithEmptyGraphAndGraphWithOnlyOneVertex_MustReturnFalse),
        ("testEquals_WithGraphWithOnlyOneVertexV1AndGraphWithOnlyOneVertexV2AndV1IsDifferentFromV2_MustReturnFalse", testEquals_WithGraphWithOnlyOneVertexV1AndGraphWithOnlyOneVertexV2AndV1IsDifferentFromV2_MustReturnFalse),
        ("testEquals_WithGraphWithOnlyOneVertexVAndGraphWithOnlyOneVertexV_MustReturnTrue", testEquals_WithGraphWithOnlyOneVertexVAndGraphWithOnlyOneVertexV_MustReturnTrue),
        ("testEquals_WithV1AndV2VerticesAndV1ToV2GraphAndGraphWithSame2VerticesAndEdge_MustReturnTrue", testEquals_WithV1AndV2VerticesAndV1ToV2GraphAndGraphWithSame2VerticesAndEdge_MustReturnTrue),
        ("testEquals_WithV1AndV2VerticesAndV1ToV2GraphAndGraphWithSame2VerticesAndInvertedEdge_MustReturnFalse", testEquals_WithV1AndV2VerticesAndV1ToV2GraphAndGraphWithSame2VerticesAndInvertedEdge_MustReturnFalse),
    ]
}

extension ImmutableQueueTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ImmutableQueueTests = [
        ("testDequeue_WithEmptyQueue_MustReturnNilElementAndEmptyQueue", testDequeue_WithEmptyQueue_MustReturnNilElementAndEmptyQueue),
        ("testDequeue_WithOneElementQueue_MustReturnSameElementAndEmptyQueue", testDequeue_WithOneElementQueue_MustReturnSameElementAndEmptyQueue),
        ("testDequeue_WithXAndYAndZElementsQueue_MustReturnXElementAndYAndZQueue", testDequeue_WithXAndYAndZElementsQueue_MustReturnXElementAndYAndZQueue),
        ("testDequeue_WithXAndYElementsQueue_MustReturnXElementAndYOnlyQueue", testDequeue_WithXAndYElementsQueue_MustReturnXElementAndYOnlyQueue),
        ("testEnqueue_WithEmptyQueueAndElement3_MustReturnQueueWithJust3", testEnqueue_WithEmptyQueueAndElement3_MustReturnQueueWithJust3),
        ("testEnqueue_WithXAndYElementsQueueAndElementZ_MustReturnXYZQueue", testEnqueue_WithXAndYElementsQueueAndElementZ_MustReturnXYZQueue),
        ("testEquals_With2ElementsLhsAnd3ElementsRhsQueuesWithCommonElements_MustReturnFalse", testEquals_With2ElementsLhsAnd3ElementsRhsQueuesWithCommonElements_MustReturnFalse),
        ("testEquals_With2ElementsLhsAnd3ElementsRhsQueuesWithoutCommonElements_MustReturnFalse", testEquals_With2ElementsLhsAnd3ElementsRhsQueuesWithoutCommonElements_MustReturnFalse),
        ("testEquals_WithDifferentLhsAndRhsOneElementQueues_MustReturnFalse", testEquals_WithDifferentLhsAndRhsOneElementQueues_MustReturnFalse),
        ("testEquals_WithLhsAndRhsEmptyQueues_MustReturnTrue", testEquals_WithLhsAndRhsEmptyQueues_MustReturnTrue),
        ("testIsEmpty_WithEmptyQueue_MustReturnTrue", testIsEmpty_WithEmptyQueue_MustReturnTrue),
        ("testIsEmpty_WithOneElementQueue_MustReturnFalse", testIsEmpty_WithOneElementQueue_MustReturnFalse),
        ("testIsEmpty_WithTwoElementQueue_MustReturnFalse", testIsEmpty_WithTwoElementQueue_MustReturnFalse),
        ("testToArray_With3ElementsQueue_MustReturnSame3ElementsArray", testToArray_With3ElementsQueue_MustReturnSame3ElementsArray),
        ("testToArray_WithEmptyQueue_MustReturnEmptyArray", testToArray_WithEmptyQueue_MustReturnEmptyArray),
    ]
}

extension MemoizeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MemoizeTests = [
        ("testMemoize_WithNonRecursiveFunctionFAndInputX_MustReturnFOfX", testMemoize_WithNonRecursiveFunctionFAndInputX_MustReturnFOfX),
        ("testMemoize_WithRecursiveFibonacciFunctionAndInputX_MustRecursiveCallXPlus1Times", testMemoize_WithRecursiveFibonacciFunctionAndInputX_MustRecursiveCallXPlus1Times),
        ("testMemoize_WithRecursiveFibonacciFunctionAndInputX_MustReturnFibonacciOfX", testMemoize_WithRecursiveFibonacciFunctionAndInputX_MustReturnFibonacciOfX),
        ("testMemoizeCalled3Times_WithNonRecursiveFunctionFAndInputX_MustAlwaysReturnTheSameValue", testMemoizeCalled3Times_WithNonRecursiveFunctionFAndInputX_MustAlwaysReturnTheSameValue),
        ("testMemoizeCalled3TimesOnSameInput_WithNonRecursiveFunctionFAndInputX_MustCallFOnlyOnce", testMemoizeCalled3TimesOnSameInput_WithNonRecursiveFunctionFAndInputX_MustCallFOnlyOnce),
    ]
}

extension SimpleGraphAnnotationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SimpleGraphAnnotationTests = [
        ("testAssociateParentToVertex_WithEmptySimpleGraphAnnotationInitFromGraph_MustReturnEmptyDFSOuptut", testAssociateParentToVertex_WithEmptySimpleGraphAnnotationInitFromGraph_MustReturnEmptyDFSOuptut),
        ("testAssociateParentToVertex_WithEmptySimpleGraphAnnotationInitFromParentByVertexAndDiscoveredByVertex_MustReturnEmptyDFSOuptut", testAssociateParentToVertex_WithEmptySimpleGraphAnnotationInitFromParentByVertexAndDiscoveredByVertex_MustReturnEmptyDFSOuptut),
        ("testAssociateParentToVertex_WithSimpleGraphAnnotationInitFromV1AndV2UnparentedAndDiscovered_MustReturnDFSOuptutWithCorrectParentByVertexAndAllVerticesDiscovered", testAssociateParentToVertex_WithSimpleGraphAnnotationInitFromV1AndV2UnparentedAndDiscovered_MustReturnDFSOuptutWithCorrectParentByVertexAndAllVerticesDiscovered),
        ("testAssociateParentToVertex_WithSimpleGraphAnnotationInitFromV1ToV2GraphAndV1AsParentForV2_MustReturnDFSOuptutWithCorrectParentByVertexAndAllVerticesUndiscovered", testAssociateParentToVertex_WithSimpleGraphAnnotationInitFromV1ToV2GraphAndV1AsParentForV2_MustReturnDFSOuptutWithCorrectParentByVertexAndAllVerticesUndiscovered),
        ("testDiscoverVertex_WithEmptySimpleGraphAnnotationInitFromGraph_MustReturnEmptyDFSOuptut", testDiscoverVertex_WithEmptySimpleGraphAnnotationInitFromGraph_MustReturnEmptyDFSOuptut),
        ("testDiscoverVertex_WithEmptySimpleGraphAnnotationInitFromParentByVertexAndDiscoveredByVertex_MustReturnEmptyDFSOuptut", testDiscoverVertex_WithEmptySimpleGraphAnnotationInitFromParentByVertexAndDiscoveredByVertex_MustReturnEmptyDFSOuptut),
        ("testDiscoverVertex_WithSimpleGraphAnnotationInitFromV1AndV2UnparentedAndOnlyV1DiscoveredAndArgumentV2_MustReturnDFSOuptutWithAllVerticesUnparentedDiscovered", testDiscoverVertex_WithSimpleGraphAnnotationInitFromV1AndV2UnparentedAndOnlyV1DiscoveredAndArgumentV2_MustReturnDFSOuptutWithAllVerticesUnparentedDiscovered),
        ("testDiscoverVertex_WithSimpleGraphAnnotationInitFromV1ToV2GraphAndArgumentV1_MustReturnDFSOuptutWithAllVerticesUnparentedAndOnlyV1Discovered", testDiscoverVertex_WithSimpleGraphAnnotationInitFromV1ToV2GraphAndArgumentV1_MustReturnDFSOuptutWithAllVerticesUnparentedAndOnlyV1Discovered),
        ("testEquals_WithEmptySimpleGraphAnnotationAndOneVertexSimpleGraphAnnotation_MustReturnFalse", testEquals_WithEmptySimpleGraphAnnotationAndOneVertexSimpleGraphAnnotation_MustReturnFalse),
        ("testEquals_WithOneVertexSimpleGraphAnnotationAndTwoVertexSimpleGraphAnnotation_MustReturnFalse", testEquals_WithOneVertexSimpleGraphAnnotationAndTwoVertexSimpleGraphAnnotation_MustReturnFalse),
        ("testEquals_WithTwoEmptySimpleGraphAnnotations_MustReturnTrue", testEquals_WithTwoEmptySimpleGraphAnnotations_MustReturnTrue),
        ("testEquals_WithTwoEqualOneVertexSimpleGraphAnnotations_MustReturnTrue", testEquals_WithTwoEqualOneVertexSimpleGraphAnnotations_MustReturnTrue),
        ("testEquals_WithTwoEqualThreeVertexSimpleGraphAnnotations_MustReturnTrue", testEquals_WithTwoEqualThreeVertexSimpleGraphAnnotations_MustReturnTrue),
        ("testEquals_WithTwoThreeVertexSimpleGraphAnnotationsWithDifferentDiscoveredByVertex_MustReturnFalse", testEquals_WithTwoThreeVertexSimpleGraphAnnotationsWithDifferentDiscoveredByVertex_MustReturnFalse),
        ("testEquals_WithTwoThreeVertexSimpleGraphAnnotationsWithDifferentParentByVertex_MustReturnFalse", testEquals_WithTwoThreeVertexSimpleGraphAnnotationsWithDifferentParentByVertex_MustReturnFalse),
        ("testInitFromGraph_With2Vertices1EdgeGraph_MustReturnSimpleGraphAnnotationWith2UndiscoveredAndUnparentedVertices", testInitFromGraph_With2Vertices1EdgeGraph_MustReturnSimpleGraphAnnotationWith2UndiscoveredAndUnparentedVertices),
        ("testInitFromGraph_WithEmptyGraph_MustReturnEmptySimpleGraphAnnotation", testInitFromGraph_WithEmptyGraph_MustReturnEmptySimpleGraphAnnotation),
        ("testInitWithParentByVertexAndDiscoveredByVertex_With5ParentByVertexAndDiscoveredByVertexEntries_MustReturnSimpleGraphAnnotationWithSameParentByVertexAndDiscoveredByVertex", testInitWithParentByVertexAndDiscoveredByVertex_With5ParentByVertexAndDiscoveredByVertexEntries_MustReturnSimpleGraphAnnotationWithSameParentByVertexAndDiscoveredByVertex),
        ("testInitWithParentByVertexAndDiscoveredByVertex_WithEmptyParentByVertexAndDiscoveredByVertex_MustReturnEmptySimpleGraphAnnotation", testInitWithParentByVertexAndDiscoveredByVertex_WithEmptyParentByVertexAndDiscoveredByVertex_MustReturnEmptySimpleGraphAnnotation),
    ]
}

extension WeightedEdgeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__WeightedEdgeTests = [
        ("testEquals_WithSameDestinationDifferentSourceWeight_MustReturnFalse", testEquals_WithSameDestinationDifferentSourceWeight_MustReturnFalse),
        ("testEquals_WithSameSourceDestinationAndWeight_MustReturnTrue", testEquals_WithSameSourceDestinationAndWeight_MustReturnTrue),
        ("testEquals_WithSameSourceWeightDifferentDestination_MustReturnFalse", testEquals_WithSameSourceWeightDifferentDestination_MustReturnFalse),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(Array_ToSetTests.__allTests__Array_ToSetTests),
        testCase(BFSTests.__allTests__BFSTests),
        testCase(DFSTests.__allTests__DFSTests),
        testCase(EdgeTests.__allTests__EdgeTests),
        testCase(FindPathTests.__allTests__FindPathTests),
        testCase(GraphTests.__allTests__GraphTests),
        testCase(ImmutableQueueTests.__allTests__ImmutableQueueTests),
        testCase(MemoizeTests.__allTests__MemoizeTests),
        testCase(SimpleGraphAnnotationTests.__allTests__SimpleGraphAnnotationTests),
        testCase(WeightedEdgeTests.__allTests__WeightedEdgeTests),
    ]
}
#endif
